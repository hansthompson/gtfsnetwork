filtered_gtfs_edge_list <- filter_srv_id(gtfs_edgelist = gtfs_el, trips, srv_id  = "1")
filtered_gtfs_edge_list <- filter_gtfs_edgelist(gtfs_edgelist = filtered_gtfs_edge_list,
start_time = starting_time, end_time = ending_time)
filtered_gtfs_edge_list <- remove_duplicate_edges(filtered_gtfs_edge_list, trips)
filtered_gtfs_edge_list <- filtered_gtfs_edge_list %>% group_by(source, target) %>% mutate(n = length(source)) %>%
group_by(trip_id)
edges <- filtered_gtfs_edge_list %>% select(source, target, size = transit_time,
edge_sequence, trip_id, n)
graph_object <-  edges %>% mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1))) %>%
filter(trip_id == "1-640-I-1")
gtfs_g <- simplify(contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = c(1,graph_object$mapping),
vertex.attr.comb=toString))
gtfs_g$name <- "TEST"
gtfs_g <- set.vertex.attribute(gtfs_g, "color", value=c("red", "green"))
install_github("hansthompson/gtfsnetwork")
library(gtfsnetwork)
stops <- read.csv("stops.txt", stringsAsFactors = TRUE)
trips <- read.csv("trips.txt", stringsAsFactors = TRUE)
stop_times <- read.csv("stop_times.txt", stringsAsFactors = TRUE)
starting_time <- hms("09:00:00")
ending_time   <- hms("09:15:00")
srv_id <- "1" # weekdays Monday-Friday for People Mover
gtfs_el <- gtfs2edgelist(stop_times)
filtered_gtfs_edge_list <- filter_srv_id(gtfs_edgelist = gtfs_el, trips, srv_id  = "1")
filtered_gtfs_edge_list <- filter_gtfs_edgelist(gtfs_edgelist = filtered_gtfs_edge_list,
start_time = starting_time, end_time = ending_time)
filtered_gtfs_edge_list <- remove_duplicate_edges(filtered_gtfs_edge_list, trips)
filtered_gtfs_edge_list <- filtered_gtfs_edge_list %>% group_by(source, target) %>% mutate(n = length(source)) %>%
group_by(trip_id)
edges <- filtered_gtfs_edge_list %>% select(source, target, size = transit_time,
edge_sequence, trip_id, n)
graph_object <-  edges %>% mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1))) %>%
filter(trip_id == "1-640-I-1")
gtfs_g <- simplify(contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = c(1,graph_object$mapping),
vertex.attr.comb=toString))
gtfs_g <- simplify(contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = graph_object$mapping,
vertex.attr.comb=toString))
gtfs_g$name <- "TEST"
gtfs_g <- set.vertex.attribute(gtfs_g, "color", value=c("red", "green"))
plot(gtfs_g)
gtfs_g
graph_object <-  edges %>% mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1))) %>%
filter(trip_id == "1-640-I-1")
graph_object
edges
edges <- filtered_gtfs_edge_list %>% select(source, target, size = transit_time,
edge_sequence, trip_id, n)
graph_object <-  edges %>% mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1))) %>%
filter(trip_id == "1-840-I-1")
graph_object
gtfs_g <- simplify(contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = graph_object$mapping,
vertex.attr.comb=toString))
gtfs_g <- simplify(contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = c(1,graph_object$mapping),
vertex.attr.comb=toString))
graph_object
row_number(edges)
row_number(edges$size ==1)
edges$n
edges %>%
mutate(n = n + ifelse(row_number(n) == 1, 1, 0))
edges %>%
mutate(n = n + ifelse(row_number(n) == 1, 1, 0))
graph_object <- edges %>%
mutate(n = n + ifelse(row_number(n) == 1, 1, 0)) %>%
mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1))) %>%
filter(trip_id == "1-840-I-1")
graph_object
gtfs_g <- simplify(contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = graph_object$mapping,
vertex.attr.comb=toString))
graph_object <- edges %>%
mutate(n = n + ifelse(row_number(n) == 1, 1, 0)) %>%
mutate(n = n + ifelse(row_number(n) == length(n), 1, 0)) %>%
mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1))) %>%
filter(trip_id == "1-840-I-1")
graph_object
graph_object <- edges %>%
mutate(n = n + ifelse(row_number(n) == 1, 1, 0)) %>%
#mutate(n = n + ifelse(row_number(n) == length(n), 1, 0)) %>%
mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1))) %>%
filter(trip_id == "1-840-I-1")
graph_object
graph_object <- edges %>%
mutate(n = n + ifelse(row_number(n) == 1, 1, 0)) %>%
mutate(n = n + ifelse(row_number(n) == nrow(n), 1, 0)) %>%
mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1))) %>%
filter(trip_id == "1-840-I-1")
graph_object
edges %>%
mutate(n = n + ifelse(row_number(n) == 1, 1, 0)) %>%
mutate(n = n + ifelse(row_number(n) == nrow(n), 1, 0))
edges
edges %>%
mutate(n = n + ifelse(row_number(n) == 1, 1, 0)) %>%
mutate(n = n + ifelse(row_number(n) == length(n), 1, 0)) %>%
mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1))) %>%
filter(trip_id == "1-840-I-1")
edges %>%
mutate(n = n + ifelse(row_number(n) == 1, 1, 0)) %>%
mutate(n = n + ifelse(row_number(n) == nrow(n), 1, 0)) %>%
mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1))) %>%
filter(trip_id == "1-840-I-1")
graph_object <- edges %>%
mutate(n = n + ifelse(row_number(n) == 1, 1, 0)) %>%
mutate(n = n + ifelse(row_number(n) == n(), 1, 0)) %>%
mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1))) %>%
filter(trip_id == "1-840-I-1")
graph_object
edges %>% summarize(n())
graph_object <- edges %>%
mutate(n = n + ifelse(row_number(n) == 1,  1, 0)) %>%
mutate(n = n + ifelse(row_number() == n(), 1, 0)) %>%
mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1))) %>%
filter(trip_id == "1-840-I-1")
graph_object
gtfs_g <- simplify(contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = graph_object$mapping,
vertex.attr.comb=toString))
graph_object <- edges %>%
mutate(n = n + ifelse(row_number(n) == 1,  1, 0)) %>%
mutate(n = n + ifelse(row_number() == n(), 1, 0)) %>%
mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1))) %>%
filter(trip_id == "1-840-I-1")
graph_object[,1:2]
graph_object$mapping
graph_object <- edges %>%
mutate(n = n + ifelse(row_number(n) == 1,  1, 0)) %>%
mutate(n = n + ifelse(row_number() == n(), 1, 0)) %>%
ungroup() %>%
mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1))) %>%
filter(trip_id == "1-840-I-1")
graph_object
edges %>%
mutate(n = n + ifelse(row_number(n) == 1,  1, 0)) %>%
mutate(n = n + ifelse(row_number() == n(), 1, 0)) %>%
ungroup() %>%
mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1)))
edges %>%
mutate(n = n + ifelse(row_number(n) == 1,  1, 0)) %>%
mutate(n = n + ifelse(row_number() == n(), 1, 0)) %>%
ungroup() %>%
mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1))) %>%
as.data.frame()
graph_object <- edges %>%
mutate(n = n + ifelse(row_number(n) == 1,  1, 0)) %>%
mutate(n = n + ifelse(row_number() == n(), 1, 0)) %>%
ungroup() %>%
mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1))) %>%
filter(trip_id == "1-840-I-1")
edgelist <- data.frame(source = c("Z","A", "B", "C", "D", "E", "F", "F", "A"),
target = c("A","B", "C", "D", "E", "F", "G", "H", "I"),
edge_sequence = c(0,1, 2, 3, 4, 5, 6, NA , NA),
source_node_out_degree = c(1,1, 1, 1, 1, 1, 2, 2, 2),
group = factor(c(1,1,1,1,1,1,1,2,2)))
plot(graph.data.frame(edgelist), edge.arrow.size = 0.3)
g <- graph.data.frame(edgelist)
h<- contract.vertices(g,c(1,2,3,3,3,3,3,8,9,10), vertex.attr.comb = toString)
h<- contract.vertices(g,mapping = c(1,2,3,3,3,3,3,8,9,10), vertex.attr.comb = toString)
new_edgelist <- as_edgelist(simplify(h))
plot(graph.data.frame(new_edgelist), edge.arrow.size = 0.3)
edgelist <- data.frame(source = c("Z","A", "B", "C", "D", "E", "F", "F", "A"),
target = c("A","B", "C", "D", "E", "F", "G", "H", "I"),
edge_sequence = c(0,1, 2, 3, 4, 5, 6, NA , NA),
source_node_out_degree = c(1,1, 1, 1, 1, 1, 2, 2, 2),
group = factor(c(1,1,1,1,1,1,1,2,2)),
map = c(1,2,3,3,3,3,3,8,9,10))
c(1,2,3,3,3,3,3,8,9,10)
factor(V(g)$category
factor(V(g)$category)
V(g)$category
library(igraph)
id <- c("1","2","A","B")
category <- c("digit","digit","char","char")
from <- c("1","1","2","A","A","B")
to <- c("2","A","A","B","1","2")
nodes <- cbind(id,category)
edges <- cbind(from,to)
g <- graph.data.frame(edges, directed=TRUE, vertices=nodes)
plot(g)
category_attr <- get.vertex.attribute(g, "category")
map = setNames(c(1:2), c("digit","char"))
category_attr <- map[unlist(category_attr)]
igraph_category <- contract.vertices(g, category_attr)
print(get.data.frame(igraph_category, what="vertices"))
plot(get.data.frame(igraph_category, what="vertices")))
plot(igraph_category)
seq_along(nrow(edgelist))
seq(nrow(edgelist))
h<- contract.vertices(g,mapping = seq(nrow(edgelist), 10), vertex.attr.comb = toString)
h<- contract.vertices(g,mapping = seq(nrow(edgelist)), vertex.attr.comb = toString)
h<- contract.vertices(g,mapping = 1:6), vertex.attr.comb = toString)
h<- contract.vertices(g,mapping = 1:6, vertex.attr.comb = toString)
g <- graph.data.frame(edgelist)
h<- contract.vertices(g,mapping = 1:7, vertex.attr.comb = toString)
h<- contract.vertices(g,mapping = 1:8, vertex.attr.comb = toString)
h<- contract.vertices(g,mapping = 1:9, vertex.attr.comb = toString)
h<- contract.vertices(g,mapping = c(1,2,3,3,3,3,3,8,9,10), vertex.attr.comb = toString)
new_edgelist <- as_edgelist(simplify(h))
plot(graph.data.frame(new_edgelist), edge.arrow.size = 0.3)
h <- contract.vertices(g,mapping = c(1,2,3,3,6,3,3,8,9,10),
vertex.attr.comb = toString)
new_edgelist <- as_edgelist(simplify(h))
plot(graph.data.frame(new_edgelist), edge.arrow.size = 0.3)
h <- contract.vertices(g,mapping = c(1,3,3,3,3,3,3,3,3,10),
vertex.attr.comb = toString)
new_edgelist <- as_edgelist(simplify(h))
plot(graph.data.frame(new_edgelist), edge.arrow.size = 0.3)
c(1,2,3,3,3,3,3,8,9,10)
g
edgelist <- data.frame(source = c("Z","A", "B", "C", "D", "E", "F", "F", "A"),
target = c("A","B", "C", "D", "E", "F", "G", "H", "I"),
edge_sequence = c(0,1, 2, 3, 4, 5, 6, NA , NA),
source_node_out_degree = c(1,1, 1, 1, 1, 1, 2, 2, 2),
group = factor(c(1,1,1,1,1,1,1,2,2)),
map = c(1,1,1,1,1,1,1,1,1,10))
h <- contract.vertices(g,mapping = c(1,1,1,1,1,1,1,1,1,10),
vertex.attr.comb = toString)
new_edgelist <- as_edgelist(simplify(h))
plot(graph.data.frame(new_edgelist), edge.arrow.size = 0.3)
h <- contract.vertices(g,mapping = c(1,1,1,1,1,1,1,1,1,2),
vertex.attr.comb = toString)
new_edgelist <- as_edgelist(simplify(h))
plot(graph.data.frame(new_edgelist), edge.arrow.size = 0.3)
h <- contract.vertices(g,mapping = c(1,1,1,1,1,1,1,1,1,4),
vertex.attr.comb = toString)
new_edgelist <- as_edgelist(simplify(h))
plot(graph.data.frame(new_edgelist), edge.arrow.size = 0.3)
h <- contract.vertices(g,mapping = c(1,1,1,1,10,1,1,1,1,4),
vertex.attr.comb = toString)
new_edgelist <- as_edgelist(simplify(h))
plot(graph.data.frame(new_edgelist), edge.arrow.size = 0.3)
h <- contract.vertices(g,mapping = c(1,1,1,1,1,1,1,1,1),
vertex.attr.comb = toString)
h <- contract.vertices(g,mapping = c(1,2,3,3,3,3,3,8,9,10),
vertex.attr.comb = toString)
new_edgelist <- as_edgelist(simplify(h))
plot(graph.data.frame(new_edgelist), edge.arrow.size = 0.3)
graph_object
x <- c(1,2,1,1,1,1,1,2)
x[1] <- x[1] + 1
x[length(x)] <- x[length(x)] + 1
x
id <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")
x <- c(1,2,1,1,1,1,1,2)
id <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")
x[1] <- x[1] + 1
x[length(x)] <- x[length(x)] + 1
for(i in seq(x)) {}
if(x[i] == 1) {y[i] <- id[i-1]}
if(x[i] >  1) {y[i] <- id[i]}
}
for(i in seq(x)) {
if(x[i] == 1) {y[i] <- id[i-1]}
if(x[i] >  1) {y[i] <- id[i]}
}
y
gz
x
x <- c(1,2,1,1,1,1,1,1)
id <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")
x[1] <- x[1] + 1
x[length(x)] <- x[length(x)] + 1
for(i in seq(x)) {
if(x[i] == 1) {y[i] <- id[i-1]}
if(x[i] >  1) {y[i] <- id[i]}
}
y
x[i]
i
x <- c(1,2,1,1,1,1,1,1,2,1)
id <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")
x[1] <- x[1] + 1
x[length(x)] <- x[length(x)] + 1
for(i in seq(x)) {
if(x[i] == 1) {y[i] <- id[i-1]}
if(x[i] >  1) {y[i] <- id[i]}
}
y
z
x
x <- c(1,1,1,1,1,1,1,1,1,1)
id <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")
x[1] <- x[1] + 1
x[length(x)] <- x[length(x)] + 1
for(i in seq(x)) {
if(x[i] == 1) {y[i] <- id[i-1]}
if(x[i] >  1) {y[i] <- id[i]}
}
y
x[3]
y <- id
y <- id
for(i in seq(x)) {
if(x[i] == 1) {y[i] <- id[i-1]}
}
x <- c(1,1,1,1,1,1,1,1,1,1)
id <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")
x[1] <- x[1] + 1
y <- id
x[length(x)] <- x[length(x)] + 1
for(i in seq(x)) {
if(x[i] == 1) {y[i] <- y[i-1]}
}
y
x <- c(1,1,3,1,1,3,1,1,1,1)
id <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")
x[1] <- x[1] + 1
y <- id
x[length(x)] <- x[length(x)] + 1
for(i in seq(x)) {
if(x[i] == 1) {y[i] <- y[i-1]}
}
y
create_mapping <- function(out_degree, ids) {
x[1] <- x[1] + 1
y <- id
x[length(x)] <- x[length(x)] + 1
for(i in seq(x)) {
if(x[i] == 1) {y[i] <- y[i-1]}
}
y
}
create_mapping
create_mapping(x, id)
create_mapping(graph_object$mapping, graph_object$source)
create_mapping <- function(out_degree, ids) {
x[1] <- x[1] + 1
y <- id
x[length(x)] <- x[length(x)] + 1
for(i in seq(x)) {
if(x[i] == 1) {y[i] <- y[i-1]}
}
y
}
create_mapping(graph_object$mapping, graph_object$source)
create_mapping <- function(out_degree, ids) {
out_degree[1] <- out_degree[1] + 1
y <- id
out_degree[length(out_degree)] <- out_degree[length(out_degree)] + 1
for(i in seq(out_degree)) {
if(out_degree[i] == 1) {y[i] <- y[i-1]}
}
y
}
create_mapping(graph_object$mapping, graph_object$source)
create_mapping <- function(out_degree, ids) {
out_degree[1] <- out_degree[1] + 1
y <- ids
out_degree[length(out_degree)] <- out_degree[length(out_degree)] + 1
for(i in seq(out_degree)) {
if(out_degree[i] == 1) {y[i] <- y[i-1]}
}
y
}
create_mapping(graph_object$mapping, graph_object$source)
contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = create_mapping(graph_object$mapping,
graph_object$source))
create_mapping(graph_object$mapping,
graph_object$source)
graph_object[,1:2]
contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = create_mapping(graph_object$mapping,
graph_object$source))
create_mapping(graph_object$mapping,
graph_object$source)
create_mapping(graph_object$mapping,
graph_object$source)
graph_object[,1:2]
create_mapping(graph_object$mapping,
graph_object$source)
length(graph_object$source)
unique(graph_object$source)
unique(c(graph_object$source, target))
unique(c(graph_object$source, graph_object$target))
contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = c(1,create_mapping(graph_object$mapping,
graph_object$source)))
plot(contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = c(1,create_mapping(graph_object$mapping,
graph_object$source))))
plot(contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = c(1,create_mapping(graph_object$mapping,
graph_object$source))), node.size = 0.1)
contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = c(1,create_mapping(graph_object$mapping,
graph_object$source)))
contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = c(479,create_mapping(graph_object$mapping,
graph_object$source)))
plot(contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = c(479,create_mapping(graph_object$mapping,
graph_object$source))))
graph_object[,1:2]
graph.data.frame(graph_object[,1:2])
h2 <- contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = c(479,create_mapping(graph_object$mapping,
graph_object$source)))
plot(h2, vertex.size = 2,
edge.arrow.size=0.01)
h2 <- contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = c(479,create_mapping(graph_object$mapping,
graph_object$source)))
plot(h2, vertex.size = 2,
edge.arrow.size=0.01)
plot(simplify(h2), vertex.size = 2,
edge.arrow.size=0.01)
plot(simplify(h2), vertex.size = 2,
edge.arrow.size=0.01)
as_edgelist(h2)
h2 <- contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = c(479,create_mapping(graph_object$mapping,
graph_object$source)),
vertex.attr.comb=toString)
plot(simplify(h2), vertex.size = 2,
edge.arrow.size=0.01)
as_edgelist(h2)
as_edgelist(h2)
uniqu(as_edgelist(h2))
unique(as_edgelist(h2))
plot(graph.data.frame(unique(as_edgelist(h2))), vertex.size = 2,
edge.arrow.size=0.01)
graph_object
x <- c(1,1,3,1,1,3,1,1,1,1)
id <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")
create_mapping <- function(out_degree, ids) {
out_degree[1] <- out_degree[1] + 1
y <- ids
out_degree[length(out_degree)] <- out_degree[length(out_degree)] + 1
for(i in seq(out_degree)) {
if(out_degree[i] == 1) {y[i] <- y[i-1]}
}
y
}
library(dplyr)
library(devtools)
install_github("hansthompson/gtfsnetwork")
library(gtfsnetwork)
stops <- read.csv("stops.txt", stringsAsFactors = TRUE)
trips <- read.csv("trips.txt", stringsAsFactors = TRUE)
stop_times <- read.csv("stop_times.txt", stringsAsFactors = TRUE)
starting_time <- hms("09:00:00")
ending_time   <- hms("09:15:00")
srv_id <- "1" # weekdays Monday-Friday for People Mover
gtfs_el <- gtfs2edgelist(stop_times)
filtered_gtfs_edge_list <- filter_srv_id(gtfs_edgelist = gtfs_el, trips, srv_id  = "1")
filtered_gtfs_edge_list <- filter_gtfs_edgelist(gtfs_edgelist = filtered_gtfs_edge_list,
start_time = starting_time, end_time = ending_time)
filtered_gtfs_edge_list <- remove_duplicate_edges(filtered_gtfs_edge_list, trips)
filtered_gtfs_edge_list <- filtered_gtfs_edge_list %>% group_by(source, target) %>% mutate(n = length(source)) %>%
group_by(trip_id)
edges <- filtered_gtfs_edge_list %>% select(source, target, size = transit_time,
edge_sequence, trip_id, n)
graph_object <- edges %>%
mutate(n = n + ifelse(row_number(n) == 1,  1, 0)) %>%
mutate(n = n + ifelse(row_number() == n(), 1, 0)) %>%
ungroup() %>%
mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1))) %>%
filter(trip_id == "1-840-I-1")
h2 <- contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = c(479,create_mapping(graph_object$mapping,
graph_object$source)),
vertex.attr.comb=toString)
plot(graph.data.frame(unique(as_edgelist(h2))), vertex.size = 2,
edge.arrow.size=0.01)
x <- c(1,1,3,1,1,3,1,1,1,1)
id <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")
create_mapping <- function(out_degree, ids) {
out_degree[1] <- out_degree[1] + 1
y <- ids
out_degree[length(out_degree)] <- out_degree[length(out_degree)] + 1
for(i in seq(out_degree)) {
if(out_degree[i] == 1) {y[i] <- y[i-1]}
}
y
}
library(dplyr)
library(devtools)
install_github("hansthompson/gtfsnetwork")
library(gtfsnetwork)
stops <- read.csv("stops.txt", stringsAsFactors = TRUE)
trips <- read.csv("trips.txt", stringsAsFactors = TRUE)
stop_times <- read.csv("stop_times.txt", stringsAsFactors = TRUE)
starting_time <- hms("09:00:00")
ending_time   <- hms("09:15:00")
srv_id <- "1" # weekdays Monday-Friday for People Mover
gtfs_el <- gtfs2edgelist(stop_times)
filtered_gtfs_edge_list <- filter_srv_id(gtfs_edgelist = gtfs_el, trips, srv_id  = "1")
filtered_gtfs_edge_list <- filter_gtfs_edgelist(gtfs_edgelist = filtered_gtfs_edge_list,
start_time = starting_time, end_time = ending_time)
filtered_gtfs_edge_list <- remove_duplicate_edges(filtered_gtfs_edge_list, trips)
filtered_gtfs_edge_list <- filtered_gtfs_edge_list %>% group_by(source, target) %>% mutate(n = length(source)) %>%
group_by(trip_id)
edges <- filtered_gtfs_edge_list %>% select(source, target, size = transit_time,
edge_sequence, trip_id, n)
graph_object <- edges %>%
mutate(n = n + ifelse(row_number(n) == 1,  1, 0)) %>%
mutate(n = n + ifelse(row_number() == n(), 1, 0)) %>%
ungroup() %>%
mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1))) %>%
filter(trip_id == "1-840-I-1")
h2 <- contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = c(479,create_mapping(graph_object$mapping,
graph_object$source)),
vertex.attr.comb=toString)
plot(graph.data.frame(unique(as_edgelist(h2))), vertex.size = 2,
edge.arrow.size=0.05)
