mapping_object[,1:2]
length(mapping_object[,1:2])
dim(mapping_object[,1:2])
c(rep(1:5, each = 40), rep(3, 7))
plot(contract.vertices(graph.data.frame(mapping_object[,1:2]),
mapping = c(rep(1:5, each = 20), rep(3, 7))))
c(rep(1:5, each = 20), rep(3, 7))
length(c(rep(1:5, each = 20), rep(3, 7)))
plot(contract.vertices(graph.data.frame(mapping_object[,1:2]),
mapping = c(rep(1:5, each = 16), rep(3, 7))))
c(rep(1:5, each = 16), rep(3, 7))
c(rep(1:5, each = 16), rep(3, 7))
length(c(rep(1:5, each = 20), rep(3, 7)))
length(c(rep(1:5, each = 16), rep(3, 7)))
plot(contract.vertices(graph.data.frame(mapping_object[,1:2]),
mapping = c(rep(1:5, each = 16), rep(3, 7))))
as.character(mapping_object[,1:2]))
as.character(mapping_object[,1:2])
mapping_object[,1:2]
mapping_object[,1:2]
plot(contract.vertices(graph.data.frame(mapping_object[,1:2])
plot(contract.vertices(graph.data.frame(mapping_object[,1:2]))
plot(contract.vertices(graph.data.frame(mapping_object[,1:2])
)
)
plot(graph.data.frame(mapping_object[,1:2])
)
contract.vertices(graph.data.frame(mapping_object[,1:2]),
mapping = c(rep(1:5, each = 16), rep(3, 7)))
c(rep(1:5, each = 16), rep(3, 7)
)
c(rep(1:5, each = 16), rep(3, 7))
length(c(rep(1:5, each = 16), rep(3, 7)))
graph.data.frame(mapping_object[,1:2])
plot(contract.vertices(graph.data.frame(mapping_object[,1:2]),
mapping = c(rep(1:5, each = 16), rep(3, 8))))
contract.vertices(graph.data.frame(mapping_object[,1:2]),
mapping = c(rep(1:5, each = 16), rep(3, 7)))
contract.vertices(graph.data.frame(mapping_object[,1:2]),
mapping = c(rep(1:5, each = 16), rep(3, 8)))
plot(contract.vertices(graph.data.frame(mapping_object[,1:2]),
mapping = c(rep(1:5, each = 16), rep(3, 8))))
plot(simplify(contract.vertices(graph.data.frame(mapping_object[,1:2]),
mapping = c(rep(1:5, each = 16), rep(3, 8)))))
plot(simplify(contract.vertices(graph.data.frame(mapping_object[,1:2]),
mapping = c(rep(1:5, each = 16), rep(3, 8)),
vertex.attr.comb=toString)))
c(rep(1:5, each = 16), rep(3, 8))
plot(simplify(contract.vertices(graph.data.frame(mapping_object[,1:2]),
mapping = c(rep(1:5, each = 16), rep(6, 8)),
vertex.attr.comb=toString)))
mapping_object
mapping_object$y
length(mapping_object$y)
c(rep(1:5, each = 16), rep(6, 8)
)
length(c(rep(1:5, each = 16), rep(6, 8)))
plot(simplify(contract.vertices(graph.data.frame(mapping_object[,1:2]),
mapping = c(1, mapping_obj),
vertex.attr.comb=toString)))
plot(simplify(contract.vertices(graph.data.frame(mapping_object[,1:2]),
mapping = c(1, mapping_object),
vertex.attr.comb=toString)))
contract.vertices(graph.data.frame(mapping_object[,1:2]),
mapping = c(1, mapping_object)
)
plot(simplify(contract.vertices(graph.data.frame(mapping_object[,1:2]),
mapping = c(1, mapping_object)),
vertex.attr.comb=toString))
plot(contract.vertices(graph.data.frame(mapping_object[,1:2]),
mapping = c(1, mapping_object),
vertex.attr.comb=toString))
plot(simplify(contract.vertices(graph.data.frame(mapping_object[,1:2]),
mapping = c(1, mapping_object),
vertex.attr.comb=toString)))
plot(simplify(contract.vertices(graph.data.frame(mapping_object[,1:2]),
mapping = c(1, mapping_object),
vertex.attr.comb=toString)))
contract.vertices(graph.data.frame(mapping_object[,1:2]),
mapping = c(rep(1:5, each = 16), rep(3, 8)))
plot(contract.vertices(graph.data.frame(mapping_object[,1:2]),
mapping = c(rep(1:5, each = 16), rep(3, 8))))
plot(contract.vertices(graph.data.frame(mapping_object[,1:2]),
mapping = c(rep(1:5, each = 16), rep(6, 8))))
warnings
warnings()
plot(contract.vertices(graph.data.frame(mapping_object[,1:2]),
mapping = charcter(c(rep(1:5, each = 16), rep(6, 8)))))
plot(contract.vertices(graph.data.frame(mapping_object[,1:2]),
mapping = character(c(rep(1:5, each = 16), rep(6, 8)))))
plot(contract.vertices(graph.data.frame(mapping_object[,1:2]),
mapping = as.character(c(rep(1:5, each = 16), rep(6, 8)))))
plot(contract.vertices(graph.data.frame(mapping_object[,1:2]),
mapping = as.character(c(rep(1:5, each = 16), rep("A", 8)))))
plot(contract.vertices(graph.data.frame(mapping_object[,1:2]),
mapping = as.character(c(rep(1:5, each = 16), rep("A", 8)))))
as.character(c(rep(1:5, each = 16), rep(, 8)))
as.character(c(rep(1:5, each = 16), rep(5, 8)))
plot(contract.vertices(graph.data.frame(mapping_object[,1:2]),
mapping = as.character(c(rep(1:5, each = 16), rep(5, 8)))))
edges[,1:2]
edges %>% group_by(trip_id) %>%
mutate(edge_sequence = edge_sequence - min(edge_sequence) + 1)
edges %>% mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1)) + 1)
edges %>% mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1)))
edges %>% mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1))) %>%
filter(trip_id == "1-640-I-1")
mapping_object <-  edges %>% mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1))) %>%
filter(trip_id == "1-640-I-1")
graph_object <-  edges %>% mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1))) %>%
filter(trip_id == "1-640-I-1")
plot(contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = graph_object$mapping))
graph_object$mapping
length(graph_object$mapping)
graph_object[,1:2]
plot(contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = c(1,graph_object$mapping)))
gtfs_g <- contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = c(1,graph_object$mapping),
vertex.attr.comb=toString))
gtfs_g <- contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = c(1,graph_object$mapping),
vertex.attr.comb=toString)
plot(gtfs_g)
plot(gtfs_g)
plot(gtfs_g)
plot(gtfs_g)
plot(gtfs_g)
gtfs_g
gtfs_g <- simplify(contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = c(1,graph_object$mapping),
vertex.attr.comb=toString)))
gtfs_g <- simplify(contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = c(1,graph_object$mapping),
vertex.attr.comb=toString))
plot(gtfs_g)
gtfs_g <- simplify(contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = c(graph_object$mapping,1),
vertex.attr.comb=toString))
gtfs_g <- simplify(contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = c(graph_object$mapping,1),
vertex.attr.comb=toString))
plot(gtfs_g)
gtfs_g <- simplify(contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = c(1,graph_object$mapping),
vertex.attr.comb=toString))
?contract.vertices
h
str(h)
h@name
h@attr
gtfs_g$name
gtfs_g$name <- "TEST"
plot(gtfs_g)
gtfs_g <- set.vertex.attribute(gtfs_g, "color", value=c("red", "green"))
plot(gtfs_g)
graph_object <-  edges %>% mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1)))
gtfs_g <- simplify(contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = c(1,graph_object$mapping),
vertex.attr.comb=toString))
graph_object[,1:2]
c(1,graph_object$mapping)
length(c(1,graph_object$mapping))
graph_object[,1:2]
gtfs_g <- simplify(contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = c(graph_object$mapping),
vertex.attr.comb=toString))
graph_object <-  edges %>% mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1))) %>%
filter(trip_id == "1-640-I-1")
gtfs_g <- simplify(contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = c(1,graph_object$mapping),
vertex.attr.comb=toString))
gtfs_g$name <- "TEST"
gtfs_g <- set.vertex.attribute(gtfs_g, "color", value=c("red", "green"))
plot(gtfs_g)
edges %>% mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1)))
graph_object <-  edges %>% mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1))) %>%
ungroup()
gtfs_g <- simplify(contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = c(1,graph_object$mapping),
vertex.attr.comb=toString))
edges %>% mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1))) %>% ungroup
edges %>% mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1))) %>% ungroup %>% as.data.frame()
min(graph_object$y)
min(graph_object$mapping)
hist(graph_object$mapping)
graph_object <-  edges %>% mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1)) + 1) %>%
ungroup()
gtfs_g <- simplify(contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = c(1,graph_object$mapping),
vertex.attr.comb=toString))
c(1,graph_object$mapping)
graph_object <-  edges %>% mutate(mapping = cumsum(ifelse(n - min_value == 0, 0, 1))) %>%
filter(trip_id == "1-640-I-1")
gtfs_g <- simplify(contract.vertices(graph.data.frame(graph_object[,1:2]),
mapping = c(1,graph_object$mapping),
vertex.attr.comb=toString))
gtfs_g
graph_object
# Download prepared igraph file from github
gs <- readRDS("pdb/depGraph-CRAN.rds")
list("Number of Pages"="sum", "first")
data.frame(group =    c("A", "A", "A", "B", "B", "B", "B", "C"),
sequence = c(1,2,3,1,2,3,4,1),
source =   c("a", "b", "c", "a", "e", "f", "g", "f"),
target =   c("b", "c", "d"< "e", "f", "g", "d", "h"),
weight =   c(1,2,1,2,1,2,1,2))
c("A", "A", "A", "B", "B", "B", "B", "C")
c(1,2,3,1,2,3,4,1)
c("a", "b", "c", "a", "e", "f", "g", "f")
c("b", "c", "d"< "e", "f", "g", "d", "h")
data.frame(group =    c("A", "A", "A", "B", "B", "B", "B", "C"),
sequence = c(1,2,3,1,2,3,4,1),
source =   c("a", "b", "c", "a", "e", "f", "g", "f"),
target =   c("b", "c", "d", "e", "f", "g", "d", "h"),
weight =   c(1,2,1,2,1,2,1,2))
el <- data.frame(group =    c("A", "A", "A", "B", "B", "B", "B", "C"),
sequence = c(1,2,3,1,2,3,4,1),
source =   c("a", "b", "c", "a", "e", "f", "g", "f"),
target =   c("b", "c", "d", "e", "f", "g", "d", "h"),
weight =   c(1,2,1,2,1,2,1,2))
el %>% group_by(source) %>% mutate(outdegree_source = length(source))
el %>% group_by(source) %>%
mutate(outdegree_source = length(source)) %>%
mutate(thing = ifelse(outdegree_source == 0, 0, 1))
el %>% group_by(source) %>%
mutate(outdegree_source = length(source)) %>%
mutate(thing = ifelse(outdegree_source == 1, 0, 1))
el %>% group_by(source) %>%
mutate(outdegree_source = length(source)) %>%
mutate(thing = ifelse(outdegree_source == 1, 0, 1)) %>%
mutate(mapping_vector = cumsum(thing))
el %>% group_by(source) %>%
mutate(outdegree_source = length(source)) %>%
mutate(thing = ifelse(outdegree_source == 1, 0, 1)) %>%
ungroup() %>% mutate(mapping_vector = cumsum(thing))
el %>% group_by(source) %>%
mutate(outdegree_source = length(source)) %>%
mutate(is_changed = ifelse(outdegree_source == 1, 0, 1)) %>%
ungroup() %>%
mutate(mapping_vector = cumsum(is_changed))
el %>% group_by(source) %>%
mutate(outdegree_source = length(source)) %>%
mutate(is_changed = ifelse(outdegree_source == 1, 0, 1)) %>%
ungroup() %>%
mutate(mapping_vector = cumsum(is_changed))
g <- graph.data.frame(edges[,3:4])
plot(g)
edges[,3:4]
edges
edges <- el %>% group_by(source) %>%
mutate(outdegree_source = length(source)) %>%
mutate(is_changed = ifelse(outdegree_source == 1, 0, 1)) %>%
ungroup() %>%
mutate(mapping_vector = cumsum(is_changed))
edges
g <- graph.data.frame(edges[,3:4])
plot(g)
contract.vertices(g, mapping = edges$mapping_vector)
plot(contract.vertices(g, mapping = edges$mapping_vector))
contract.vertices(g, mapping = edges$mapping_vector, vertex.attr.comb=toString)
g <- contract.vertices(g, mapping = edges$mapping_vector, vertex.attr.comb=toString)
plot(g)
g <- graph.data.frame(edges[,3:4])
plot(g)
g <- contract.vertices(g, mapping = edges$mapping_vector, vertex.attr.comb=toString)
plot(g)
g <- simplify(g)
plot(g)
g <- graph.data.frame(edges[,3:4])
g <- contract.vertices(g, mapping = edges$mapping_vector, vertex.attr.comb=toString)
plot(g)
g <- simplify(g)
plot(g)
edges
gtfs_el <- gtfs2edgelist(stop_times)
filtered_gtfs_edge_list <- filter_srv_id(gtfs_edgelist = gtfs_el, trips, srv_id  = "1")
filtered_gtfs_edge_list <- filter_gtfs_edgelist(gtfs_edgelist = filtered_gtfs_edge_list,
start_time = starting_time, end_time = ending_time)
filtered_gtfs_edge_list <- remove_duplicate_edges(filtered_gtfs_edge_list, trips)
filtered_gtfs_edge_list <- filtered_gtfs_edge_list %>% group_by(source, target) %>% mutate(n = length(source)) %>%
group_by(trip_id)
edges <- filtered_gtfs_edge_list %>% select(source, target, size = transit_time,
edge_sequence, trip_id, n)
edges
edges %>% select(source, target, trip_id) %>%
group_by(trip_id) %>%
mutate(outdegree_source = length(source)) %>%
mutate(is_changed = ifelse(outdegree_source == 1, 0, 1)) %>%
ungroup() %>%
mutate(mapping_vector = cumsum(is_changed))
edges_new <- edges %>% select(source, target, trip_id) %>%
group_by(trip_id) %>%
mutate(outdegree_source = length(source)) %>%
mutate(is_changed = ifelse(outdegree_source == 1, 0, 1)) %>%
ungroup() %>%
mutate(mapping_vector = cumsum(is_changed))
g <- graph.data.frame(edges_new[,3:4])
plot(g)
g <- contract.vertices(g, mapping = edges$mapping_vector, vertex.attr.comb=toString)
g
edges_new
g <- graph.data.frame(edges_new[,1:2])
g <- contract.vertices(g, mapping = edges$mapping_vector, vertex.attr.comb=toString)
plot(g)
plot(g, node.size =0.1)
plot(g, size =0.1)
plot(g, size =0.1)
plot(g, shape = "square")
plot(g, vertex.size =0.1)
plot(g, vertex.size =0.1, vertice.label = F)
plot(g, vertex.size =0.1, vertice.label = F,
edge.arrow.size=0.01)
plot(g, vertex.size =0.1,
edge.arrow.size=0.01)
plot(g, vertex.size =0.1,
edge.arrow.size=0.01,
vertex.label.size = 0.1)
plot(g, vertex.size =0.1,
edge.arrow.size=0.01,
label.size = 0.1)
V(g)$label.cex
V(g)$label
V(g)$label <- ""
plot(g, vertex.size =0.1,
edge.arrow.size=0.01,
label.size = 0.1)
plot(g, vertex.size =0.1,
edge.arrow.size=0.01)
plot.window(c(0,1),c(0,1), xaxs = "i", yaxs = "i")
plot(g, vertex.size =0.1,
edge.arrow.size=0.01)
par(mar=c(0,0,0,0))
plot(g, vertex.size =0.1,
edge.arrow.size=0.01)
g <- simplify(g)
plot(g, vertex.size =0.1,
edge.arrow.size=0.01)
?graph.data.frame
g <- graph_from_data_frame(edges_new[,1:2], directed = TRUE)
g <- contract.vertices(g, mapping = edges$mapping_vector, vertex.attr.comb=toString)
g <- simplify(g)
plot(g, vertex.size =0.1,...//
edge.arrow.size=0.01)
plot(g, vertex.size =0.1,
edge.arrow.size=0.01)
V(g)$label <- ""
plot(g, vertex.size =0.1,
edge.arrow.size=0.01)
g <- contract.vertices(g, mapping = edges$mapping_vector, vertex.attr.comb=toString)
g <- graph_from_data_frame(edges_new[,1:2], directed = TRUE)
g <- contract.vertices(g, mapping = edges$mapping_vector, vertex.attr.comb=toString)
edges$mapping_vector
g <- contract.vertices(g, mapping = edges_new$mapping_vector, vertex.attr.comb=toString)
edges_new$mapping_vector
length(edges_new$mapping_vector)
edges_new
length(edges_new)
dim(edges_new)
length(edges_new)
length(edges_new$mapping_vector)
min(edges_new$mapping_vector)
plot(edges_new$mapping_vector)
hist(edges_new$mapping_vector)
plot(edges_new$mapping_vector)
edges_new$mapping_vector
duplicatededges_new$mapping_vector)
duplicateded(edges_new$mapping_vector)
duplicated(edges_new$mapping_vector)
edges_new$is_changed
edges_new$outdegree_source
edges_new <- edges %>% select(source, target, trip_id) %>%
group_by(source, target) %>%
mutate(outdegree_source = length(source)) %>%
group_by(trip_id) %>%
mutate(is_changed = ifelse(outdegree_source == 1, 0, 1)) %>%
ungroup() %>%
mutate(mapping_vector = cumsum(is_changed))
head(edges_new)
g <- graph_from_data_frame(edges_new[,1:2], directed = TRUE)
g <- contract.vertices(g, mapping = edges_new$mapping_vector, vertex.attr.comb=toString)
edges_new$mapping_vector
g <- contract.vertices(g, mapping = edges_new$mapping_vector, vertex.attr.comb=toString)
g <- simplify(g)
V(g)$label <- ""
plot(g, vertex.size =0.1,
edge.arrow.size=0.01)
g <- contract.vertices(g, mapping = edges_new$mapping_vector, vertex.attr.comb=toString)
min(edges_new$mapping_vector)
duplicated(edges_new$mapping_vector)
unique(edges_new$mapping_vector)
unique(edges_new$mapping_vector) == 1:646
unique(edges_new$mapping_vector)
g <- graph_from_data_frame(edges_new[,1:2], directed = TRUE)
g <- simplify(g)
g <- contract.vertices(g, mapping = edges_new$mapping_vector, vertex.attr.comb=toString)
edges_new <- edges %>% select(source, target, trip_id) %>%
group_by(source, target) %>%
mutate(outdegree_source = length(source)) %>%
group_by(trip_id) %>%
mutate(is_changed = ifelse(outdegree_source == 1, 0, 1)) %>%
ungroup() %>%
mutate(mapping_vector = cumsum(is_changed))
g <- graph_from_data_frame(edges_new[,1:2], directed = TRUE)
g <- contract.vertices(g, mapping = edges_new$mapping_vector, vertex.attr.comb=toString)
edges_new$mapping_vector
edges_new[,1:2]
edges_new[,1:2] %>% as.data.frame()
g <- graph_from_data_frame(edges_new[,1:2], directed = TRUE)
plot(g, vertex.size =0.1,
edge.arrow.size=0.01)
V(g)$label <- ""
plot(g, vertex.size =0.1,
edge.arrow.size=0.01)
plot(g, vertex.size =0.1,
edge.arrow.size=0.01)
g <- contract.vertices(g, mapping = c(1,edges_new$mapping_vector), vertex.attr.comb=toString)
g <- graph_from_data_frame(edges_new[,1:2], directed = TRUE)
g <- contract.vertices(g, mapping = c(1,edges_new$mapping_vector), vertex.attr.comb=toString)
g <- graph_from_data_frame(edges_new[,1:2], directed = TRUE)
plot(g, vertex.size =0.1,
edge.arrow.size=0.01)
V(g)$label <- ""
plot(g, vertex.size =0.1,
edge.arrow.size=0.01)
g <- simplify(g)
plot(g, vertex.size =0.1,
edge.arrow.size=0.01)
bipartite.projection((g))
bipartite.projection(g)
g
plot(g)
bipartite.projection(g)
V(g)$type
V(g)$type <- V(g)$name %in% edges[,1]
V(g)$type
edges[,1]
V(g)$name
edges[,1]
V(g)$name %in% edges[,1]
edges_new <- edges %>% select(source, target, trip_id) %>%
group_by(source, target) %>%
mutate(outdegree_source = length(source)) %>%
group_by(trip_id) %>%
mutate(is_changed = ifelse(outdegree_source == 1, 0, 1)) %>%
ungroup() %>%
mutate(mapping_vector = cumsum(is_changed))
g <- graph_from_data_frame(edges_new[,1:2], directed = TRUE)
g <- simplify(g)
V(g)$label <- ""
plot(g, vertex.size =0.1,
edge.arrow.size=0.01)
V(g)$type <- V(g)$name %in% edges[,1]
plot(g, vertex.size =0.1,
edge.arrow.size=0.01)
plot(g, vertex.size =0.1,
edge.arrow.size=0.01)
V(g)$type <- V(g)$name %in% edges[,1]
edges_new <- edges %>% select(source, target, trip_id) %>%
group_by(source, target) %>%
mutate(outdegree_source = length(source)) %>%
group_by(trip_id) %>%
mutate(is_changed = ifelse(outdegree_source == 1, 0, 1)) %>%
ungroup() %>%
mutate(mapping_vector = cumsum(is_changed))
g <- graph_from_data_frame(edges_new[,1:2], directed = TRUE)
g <- simplify(g)
V(g)$label <- ""
plot(g, vertex.size =0.1,
edge.arrow.size=0.01)
plot(g, vertex.size =0.2,
edge.arrow.size=0.01)
plot(g, vertex.size =0.4,
edge.arrow.size=0.01)
plot(g, vertex.size =0.001,
edge.arrow.size=0.01)
plot(g, vertex.size =1,
edge.arrow.size=0.01)
plot(g, vertex.size = 1,
edge.arrow.size=0.01)
plot(g, vertex.size = 10,
edge.arrow.size=0.01)
plot(g, vertex.size = 2,
edge.arrow.size=0.01)
bipartite.projection(g)
g <- graph_from_data_frame(edges_new[,1:2], directed = TRUE)
bipartite.projection(igraph)
bipartite.projection(g)
plot(g, vertex.size = 2,
edge.arrow.size=0.01,
layout=layout_in_circle)
V(g)$label <- ""
plot(g, vertex.size = 2,
edge.arrow.size=0.01,
layout=layout_in_circle)
plot(g, vertex.size = 2,
edge.arrow.size=0.01,
layout=layout_in_circle)
plot(g, vertex.size = 2,
edge.arrow.size=0.01,
layout=layout_in_circle)
plot(g, vertex.size = 2,
edge.arrow.size=0.01,
layout=layout_in_circle)
plot(g, vertex.size = 2,
edge.arrow.size=0.01,
layout=layout_nicely)
layout=layout_on_sphere)
plot(g, vertex.size = 2,
edge.arrow.size=0.01,
layout=layout_on_sphere)
